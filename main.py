# main.py - ÁúüÂØ¶AIÊï¥ÂêàÁâàÊú¨
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse
import sqlite3
import uuid
import os
import re
from datetime import datetime
from typing import Dict, List
import tempfile
import base64
import requests
import json

# Âª∫Á´ãÂøÖË¶ÅÁöÑË≥áÊñôÂ§æ
os.makedirs("uploads", exist_ok=True)
os.makedirs("static", exist_ok=True)

app = FastAPI(title="Êö¥ÂäõË®òÂ∏≥Á≥ªÁµ±", description="ÊãçÁÖß‚ÜíËæ®Ë≠ò‚ÜíË®òÂ∏≥ÔºåÂ∞±ÈÄôÈ∫ºÁ∞°ÂñÆÔºÅ")


# Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂáΩÂºè
def init_database():
    """ÂàùÂßãÂåñÂÆåÊï¥ÁöÑÂ∞èÂûãÂÖ¨Âè∏Ë®òÂ∏≥Ë≥áÊñôÂ∫´"""
    try:
        conn = sqlite3.connect('receipts.db')
        cursor = conn.cursor()

        print("üèóÔ∏è Âª∫Á´ãÂ∞èÂûãÂÖ¨Âè∏Ë®òÂ∏≥Ë≥áÊñôÂ∫´...")

        # 1. ÂÖ¨Âè∏Âü∫Êú¨Ë≥áÊñôË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS company (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                tax_id TEXT UNIQUE,
                address TEXT,
                phone TEXT,
                email TEXT,
                website TEXT,
                industry TEXT,
                founded_date TEXT,
                capital REAL DEFAULT 0,
                fiscal_year_start INTEGER DEFAULT 1,
                accounting_method TEXT DEFAULT 'accrual',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 2. Âì°Â∑•ÁÆ°ÁêÜË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS employees (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id TEXT UNIQUE,
                name TEXT NOT NULL,
                email TEXT,
                phone TEXT,
                department TEXT,
                position TEXT,
                salary REAL DEFAULT 0,
                start_date TEXT,
                end_date TEXT,
                status TEXT DEFAULT 'active',
                expense_limit REAL DEFAULT 5000,
                can_approve BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 3. ÈÉ®ÈñÄ/Ë≤ªÁî®‰∏≠ÂøÉË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS departments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                manager_id INTEGER REFERENCES employees(id),
                budget_monthly REAL DEFAULT 0,
                budget_annual REAL DEFAULT 0,
                description TEXT,
                status TEXT DEFAULT 'active',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 4. Â∞àÊ°àÁÆ°ÁêÜË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS projects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                client_name TEXT,
                start_date TEXT,
                end_date TEXT,
                budget REAL DEFAULT 0,
                actual_cost REAL DEFAULT 0,
                status TEXT DEFAULT 'active',
                manager_id INTEGER REFERENCES employees(id),
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 5. ‰æõÊáâÂïÜÁÆ°ÁêÜË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS suppliers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE,
                name TEXT NOT NULL,
                tax_id TEXT,
                contact_person TEXT,
                phone TEXT,
                email TEXT,
                address TEXT,
                payment_terms TEXT DEFAULT 'NET30',
                credit_limit REAL DEFAULT 0,
                bank_account TEXT,
                bank_name TEXT,
                status TEXT DEFAULT 'active',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 6. ÂÆ¢Êà∂ÁÆ°ÁêÜË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS customers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT UNIQUE,
                name TEXT NOT NULL,
                tax_id TEXT,
                contact_person TEXT,
                phone TEXT,
                email TEXT,
                address TEXT,
                payment_terms TEXT DEFAULT 'NET30',
                credit_limit REAL DEFAULT 0,
                status TEXT DEFAULT 'active',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 7. ÊúÉË®àÁßëÁõÆË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS chart_of_accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_code TEXT UNIQUE NOT NULL,
                account_name TEXT NOT NULL,
                account_type TEXT NOT NULL,
                parent_code TEXT,
                level INTEGER DEFAULT 1,
                is_active BOOLEAN DEFAULT 1,
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 8. ÂàÜÈ°ûË°®ÔºàÊîØÂá∫ÂàÜÈ°ûÔºâ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                keywords TEXT,
                account_code TEXT REFERENCES chart_of_accounts(account_code),
                tax_deductible BOOLEAN DEFAULT 1,
                requires_receipt BOOLEAN DEFAULT 1,
                requires_approval BOOLEAN DEFAULT 0,
                approval_limit REAL DEFAULT 0,
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 9. ÁôºÁ•®Ë®òÈåÑË°®Ôºà‰∏ªË¶Å‰∫§ÊòìË°®Ôºâ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS receipts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                receipt_type TEXT DEFAULT 'expense',
                photo_path TEXT,
                invoice_number TEXT,
                date TEXT NOT NULL,
                due_date TEXT,

                -- ÂïÜÂÆ∂/‰æõÊáâÂïÜË≥áË®ä
                merchant TEXT,
                supplier_id INTEGER REFERENCES suppliers(id),
                supplier_tax_id TEXT,

                -- ÈáëÈ°çË≥áË®ä
                amount REAL DEFAULT 0,
                tax_amount REAL DEFAULT 0,
                tax_rate REAL DEFAULT 0.05,
                net_amount REAL DEFAULT 0,

                -- ÂàÜÈ°ûÂíåÊúÉË®à
                category TEXT DEFAULT 'ÈõúË≤ª',
                account_code TEXT REFERENCES chart_of_accounts(account_code),
                department_id INTEGER REFERENCES departments(id),
                project_id INTEGER REFERENCES projects(id),

                -- ÂØ©Ê†∏ÁãÄÊÖã
                status TEXT DEFAULT 'pending',
                submitted_by INTEGER REFERENCES employees(id),
                approved_by INTEGER REFERENCES employees(id),
                approved_at TEXT,

                -- AI ÂíåËôïÁêÜË≥áË®ä
                description TEXT,
                notes TEXT,
                is_business BOOLEAN DEFAULT 1,
                is_recurring BOOLEAN DEFAULT 0,
                recurring_frequency TEXT,
                ocr_confidence REAL DEFAULT 0,

                -- ‰ªòÊ¨æË≥áË®ä
                payment_method TEXT,
                payment_status TEXT DEFAULT 'unpaid',
                paid_date TEXT,
                paid_amount REAL DEFAULT 0,

                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 10. ÈäÄË°åÂ∏≥Êà∂Ë°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bank_accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                account_name TEXT NOT NULL,
                bank_name TEXT NOT NULL,
                account_number TEXT,
                account_type TEXT DEFAULT 'checking',
                currency TEXT DEFAULT 'TWD',
                opening_balance REAL DEFAULT 0,
                current_balance REAL DEFAULT 0,
                is_active BOOLEAN DEFAULT 1,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 11. ÈäÄË°å‰∫§ÊòìË®òÈåÑË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bank_transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bank_account_id INTEGER REFERENCES bank_accounts(id),
                transaction_date TEXT NOT NULL,
                description TEXT,
                reference_number TEXT,
                debit_amount REAL DEFAULT 0,
                credit_amount REAL DEFAULT 0,
                balance REAL DEFAULT 0,
                category TEXT,
                receipt_id INTEGER REFERENCES receipts(id),
                reconciled BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 12. È†êÁÆóÁÆ°ÁêÜË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS budgets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                budget_year INTEGER NOT NULL,
                budget_month INTEGER,
                department_id INTEGER REFERENCES departments(id),
                project_id INTEGER REFERENCES projects(id),
                category_id INTEGER REFERENCES categories(id),
                budgeted_amount REAL DEFAULT 0,
                actual_amount REAL DEFAULT 0,
                variance_amount REAL DEFAULT 0,
                variance_percentage REAL DEFAULT 0,
                notes TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 13. Â†±Èä∑Áî≥Ë´ãË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expense_claims (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                claim_number TEXT UNIQUE,
                employee_id INTEGER REFERENCES employees(id),
                claim_date TEXT NOT NULL,
                total_amount REAL DEFAULT 0,
                status TEXT DEFAULT 'draft',
                submitted_date TEXT,
                approved_date TEXT,
                approved_by INTEGER REFERENCES employees(id),
                paid_date TEXT,
                purpose TEXT,
                notes TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 14. Â†±Èä∑ÊòéÁ¥∞Ë°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expense_claim_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                claim_id INTEGER REFERENCES expense_claims(id),
                receipt_id INTEGER REFERENCES receipts(id),
                expense_date TEXT NOT NULL,
                description TEXT,
                amount REAL DEFAULT 0,
                category TEXT,
                billable_to_client BOOLEAN DEFAULT 0,
                client_id INTEGER REFERENCES customers(id),
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 15. ÁôºÁ•®ÈñãÁ´ãË°®ÔºàÈä∑È†ÖÔºâ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS invoices_issued (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                invoice_number TEXT UNIQUE NOT NULL,
                customer_id INTEGER REFERENCES customers(id),
                invoice_date TEXT NOT NULL,
                due_date TEXT,
                subtotal REAL DEFAULT 0,
                tax_amount REAL DEFAULT 0,
                total_amount REAL DEFAULT 0,
                status TEXT DEFAULT 'draft',
                paid_amount REAL DEFAULT 0,
                notes TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # 16. Á®ÖÂãôË®òÈåÑË°®
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tax_records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tax_year INTEGER NOT NULL,
                tax_quarter INTEGER,
                tax_type TEXT NOT NULL,
                taxable_amount REAL DEFAULT 0,
                tax_amount REAL DEFAULT 0,
                tax_rate REAL DEFAULT 0,
                status TEXT DEFAULT 'calculated',
                filed_date TEXT,
                paid_date TEXT,
                notes TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        print("üìã Âª∫Á´ãË≥áÊñôË°®ÂÆåÊàêÔºåÈñãÂßãÊèíÂÖ•È†êË®≠Ë≥áÊñô...")

        # Ê™¢Êü•‰∏¶Ê∑ªÂä†Áº∫Â§±ÁöÑÊ¨Ñ‰ΩçÔºàÂêëÂæåÁõ∏ÂÆπÔºâ
        cursor.execute("PRAGMA table_info(receipts)")
        columns = [column[1] for column in cursor.fetchall()]

        missing_columns = [
            ('ocr_confidence', 'REAL DEFAULT 0'),
            ('department_id', 'INTEGER'),
            ('project_id', 'INTEGER'),
            ('supplier_id', 'INTEGER'),
            ('status', 'TEXT DEFAULT "pending"'),
            ('payment_status', 'TEXT DEFAULT "unpaid"')
        ]

        for column_name, column_def in missing_columns:
            if column_name not in columns:
                cursor.execute(f'ALTER TABLE receipts ADD COLUMN {column_name} {column_def}')
                print(f"‚úÖ Ê∑ªÂä† {column_name} Ê¨Ñ‰Ωç")

        # ÊèíÂÖ•È†êË®≠ÊúÉË®àÁßëÁõÆ
        cursor.execute('SELECT COUNT(*) FROM chart_of_accounts')
        if cursor.fetchone()[0] == 0:
            accounts = [
                # Ë≥áÁî¢È°û
                ('1000', 'ÊµÅÂãïË≥áÁî¢', 'Assets', None, 1),
                ('1100', 'ÁèæÈáëÂèäÁ¥ÑÁï∂ÁèæÈáë', 'Assets', '1000', 2),
                ('1110', 'Â∫´Â≠òÁèæÈáë', 'Assets', '1100', 3),
                ('1120', 'ÈäÄË°åÂ≠òÊ¨æ', 'Assets', '1100', 3),
                ('1200', 'ÊáâÊî∂Â∏≥Ê¨æ', 'Assets', '1000', 2),
                ('1300', 'Â≠òË≤®', 'Assets', '1000', 2),
                ('1500', 'Âõ∫ÂÆöË≥áÁî¢', 'Assets', None, 1),
                ('1510', 'Ë®≠ÂÇô', 'Assets', '1500', 2),
                ('1520', 'Á¥ØË®àÊäòËàä', 'Assets', '1500', 2),

                # Ë≤†ÂÇµÈ°û
                ('2000', 'ÊµÅÂãïË≤†ÂÇµ', 'Liabilities', None, 1),
                ('2100', 'Êáâ‰ªòÂ∏≥Ê¨æ', 'Liabilities', '2000', 2),
                ('2200', 'Êáâ‰ªòËñ™Ë≥á', 'Liabilities', '2000', 2),
                ('2300', 'Êáâ‰ªòÁ®ÖÊ¨æ', 'Liabilities', '2000', 2),

                # Ê¨äÁõäÈ°û
                ('3000', 'Ê•≠‰∏ªÊ¨äÁõä', 'Equity', None, 1),
                ('3100', 'ËÇ°Êú¨', 'Equity', '3000', 2),
                ('3200', '‰øùÁïôÁõàÈ§ò', 'Equity', '3000', 2),

                # Êî∂ÂÖ•È°û
                ('4000', 'ÁáüÊ•≠Êî∂ÂÖ•', 'Revenue', None, 1),
                ('4100', 'Èä∑Ë≤®Êî∂ÂÖ•', 'Revenue', '4000', 2),
                ('4200', 'ÊúçÂãôÊî∂ÂÖ•', 'Revenue', '4000', 2),

                # Ë≤ªÁî®È°û
                ('5000', 'ÁáüÊ•≠Ë≤ªÁî®', 'Expenses', None, 1),
                ('5100', 'Èä∑Ë≤®ÊàêÊú¨', 'Expenses', '5000', 2),
                ('5200', 'Ëñ™Ë≥áË≤ªÁî®', 'Expenses', '5000', 2),
                ('5300', 'ÁßüÈáëË≤ªÁî®', 'Expenses', '5000', 2),
                ('5400', 'Ëæ¶ÂÖ¨Ë≤ªÁî®', 'Expenses', '5000', 2),
                ('5500', 'Â∑ÆÊóÖË≤ª', 'Expenses', '5000', 2),
                ('5600', 'È§êË≤ª', 'Expenses', '5000', 2),
                ('5700', '‰∫§ÈÄöË≤ª', 'Expenses', '5000', 2),
                ('5800', 'ËªüÈ´îË≤ªÁî®', 'Expenses', '5000', 2),
                ('5900', 'ÈõúÈ†ÖË≤ªÁî®', 'Expenses', '5000', 2),
            ]

            for code, name, acc_type, parent, level in accounts:
                cursor.execute('''
                    INSERT INTO chart_of_accounts (account_code, account_name, account_type, parent_code, level)
                    VALUES (?, ?, ?, ?, ?)
                ''', (code, name, acc_type, parent, level))

            print("‚úÖ ÊúÉË®àÁßëÁõÆÂª∫Á´ãÂÆåÊàê")

        # ÊèíÂÖ•È†êË®≠ÂàÜÈ°ûÔºàÈÄ£ÁµêÊúÉË®àÁßëÁõÆÔºâ
        cursor.execute('SELECT COUNT(*) FROM categories')
        if cursor.fetchone()[0] == 0:
            categories = [
                ('È§êË≤ª', 'È§êÂª≥,Â∞èÂêÉ,ÂíñÂï°,‰æøÁï∂,ÁÅ´Èçã,ÁáíÁÉ§,È£≤Êñô,È∫•Áï∂Âãû,ËÇØÂæ∑Âü∫,ÊòüÂ∑¥ÂÖã,85Â∫¶C', '5600', True, True, False,
                 1000),
                ('‰∫§ÈÄöË≤ª', 'Âä†Ê≤π,ÂÅúËªä,È´òÈêµ,Ë®àÁ®ãËªä,Êç∑ÈÅã,ÂÖ¨Ëªä,Ê©üÁ•®,Âè∞Èêµ,ÂÆ¢ÈÅã,Uber', '5700', True, True, False, 1000),
                ('Ëæ¶ÂÖ¨Áî®ÂìÅ', 'ÊñáÂÖ∑,Á¥ôÂºµ,Âç∞Ë°®Ê©ü,ÈõªËÖ¶,Á≠Ü,Ë≥áÊñôÂ§æ,Ë™†ÂìÅ,ÈáëÁü≥Â†Ç', '5400', True, True, False, 2000),
                ('ËªüÈ´îÊúçÂãô', 'Ë®ÇÈñ±,SaaS,Office,Adobe,Google,AWS,Microsoft,Apple', '5800', True, True, True, 5000),
                ('Ë®≠ÂÇôÊé°Ë≥º', 'ÈõªËÖ¶,Ëû¢Âπï,ÈçµÁõ§,ÊªëÈº†,Ê§ÖÂ≠ê,Ê°åÂ≠ê,3C,Áá¶Âù§,ÂÖ®ÂúãÈõªÂ≠ê', '1510', True, True, True, 10000),
                ('Ë≥ºÁâ©', 'ÁôæË≤®,ÈáèË≤©,ÂÆ∂Ê®ÇÁ¶è,ÂÖ®ËÅØ,Â•ΩÂ∏ÇÂ§ö,Â§ßÊΩ§Áôº,Ë≥ºÁâ©', '5900', True, True, False, 3000),
                ('ÈÜ´ÁôÇË≤ªÁî®', 'Ëó•Â±Ä,ÈÜ´Èô¢,Ë®∫ÊâÄ,ÂÅ•‰øù,ÈÜ´ÁôÇ,Â∫∑ÊòØÁæé,Â±àËá£Ê∞è', '5900', True, True, False, 2000),
                ('Â®õÊ®ÇË≤ªÁî®', 'ÈõªÂΩ±,KTV,ÈÅäÊà≤,Â®õÊ®Ç,Â®ÅÁßÄ,ÂúãË≥ì', '5900', False, True, False, 1000),
                ('ÁßüÈáëÊ∞¥Èõª', 'Ê∞¥Èõª,ÈõªË©±,Á∂≤Ë∑Ø,ÊàøÁßü,ÁßüÈáë', '5300', True, True, False, 0),
                ('Ëñ™Ë≥áË≤ªÁî®', 'Ëñ™Ê∞¥,Ëñ™Ë≥á,ÁçéÈáë,Âãû‰øù,ÂÅ•‰øù', '5200', True, False, True, 0),
                ('Â∑ÆÊóÖË≤ªÁî®', 'Âá∫Â∑Æ,‰ΩèÂÆø,È£ØÂ∫ó,ÊóÖÈ§®', '5500', True, True, True, 5000),
                ('ÈäÄË°åÊâãÁ∫åË≤ª', 'ÈäÄË°å,ÊâãÁ∫åË≤ª,ÂåØÊ¨æ,ËΩâÂ∏≥', '5900', True, False, False, 0),
                ('ÈõúÈ†ÖË≤ªÁî®', 'Ê∏ÖÊΩî,Á∂≠‰øÆ,ÈÉµË≥á,Âø´ÈÅû', '5900', True, True, False, 1000)
            ]

            for name, keywords, acc_code, deductible, receipt_req, approval_req, approval_limit in categories:
                cursor.execute('''
                    INSERT INTO categories 
                    (name, keywords, account_code, tax_deductible, requires_receipt, requires_approval, approval_limit)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (name, keywords, acc_code, deductible, receipt_req, approval_req, approval_limit))

            print("‚úÖ ÊîØÂá∫ÂàÜÈ°ûÂª∫Á´ãÂÆåÊàê")

        # ÊèíÂÖ•È†êË®≠ÈÉ®ÈñÄ
        cursor.execute('SELECT COUNT(*) FROM departments')
        if cursor.fetchone()[0] == 0:
            departments = [
                ('ADMIN', 'Ë°åÊîøÁÆ°ÁêÜÈÉ®', 50000, 600000),
                ('SALES', 'Ê•≠ÂãôÈÉ®', 80000, 960000),
                ('TECH', 'ÊäÄË°ìÈÉ®', 100000, 1200000),
                ('MKT', 'Ë°åÈä∑ÈÉ®', 60000, 720000),
                ('FIN', 'Ë≤°ÂãôÈÉ®', 30000, 360000),
                ('HR', '‰∫∫ÂäõË≥áÊ∫êÈÉ®', 40000, 480000)
            ]

            for code, name, monthly_budget, annual_budget in departments:
                cursor.execute('''
                    INSERT INTO departments (code, name, budget_monthly, budget_annual)
                    VALUES (?, ?, ?, ?)
                ''', (code, name, monthly_budget, annual_budget))

            print("‚úÖ ÈÉ®ÈñÄÂª∫Á´ãÂÆåÊàê")

        # ÊèíÂÖ•È†êË®≠Âì°Â∑•ÔºàÁ≥ªÁµ±ÁÆ°ÁêÜÂì°Ôºâ
        cursor.execute('SELECT COUNT(*) FROM employees')
        if cursor.fetchone()[0] == 0:
            cursor.execute('''
                INSERT INTO employees 
                (employee_id, name, email, department, position, salary, expense_limit, can_approve, status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', ('ADMIN001', 'Á≥ªÁµ±ÁÆ°ÁêÜÂì°', 'admin@company.com', 'ADMIN', 'Á≥ªÁµ±ÁÆ°ÁêÜÂì°', 0, 999999, True, 'active'))

            print("‚úÖ Á≥ªÁµ±ÁÆ°ÁêÜÂì°Âª∫Á´ãÂÆåÊàê")

        # ÊèíÂÖ•ÂÖ¨Âè∏Âü∫Êú¨Ë≥áÊñô
        cursor.execute('SELECT COUNT(*) FROM company')
        if cursor.fetchone()[0] == 0:
            cursor.execute('''
                INSERT INTO company 
                (name, tax_id, address, phone, email, industry, capital, fiscal_year_start)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', ('ÊàëÁöÑÂÖ¨Âè∏', '12345678', 'Âè∞ÂåóÂ∏Ç‰ø°Áæ©ÂçÄ', '02-12345678',
                  'info@mycompany.com', 'ËªüÈ´îÈñãÁôº', 1000000, 1))

            print("‚úÖ ÂÖ¨Âè∏Âü∫Êú¨Ë≥áÊñôÂª∫Á´ãÂÆåÊàê")

        # ÊèíÂÖ•È†êË®≠ÈäÄË°åÂ∏≥Êà∂
        cursor.execute('SELECT COUNT(*) FROM bank_accounts')
        if cursor.fetchone()[0] == 0:
            cursor.execute('''
                INSERT INTO bank_accounts 
                (account_name, bank_name, account_number, account_type, opening_balance, current_balance)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', ('ÂÖ¨Âè∏ÂæÄ‰æÜÂ∏≥Êà∂', 'Á¨¨‰∏ÄÈäÄË°å', '123-456-789012', 'checking', 1000000, 1000000))

            print("‚úÖ ÈäÄË°åÂ∏≥Êà∂Âª∫Á´ãÂÆåÊàê")

        conn.commit()
        conn.close()

        print("üéâ Â∞èÂûãÂÖ¨Âè∏Ë®òÂ∏≥Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂÆåÊàêÔºÅ")
        print("üìä ÂåÖÂê´ÂäüËÉΩÔºö")
        print("   ‚Ä¢ Âü∫Êú¨ÊúÉË®àÁßëÁõÆ (30+ ÁßëÁõÆ)")
        print("   ‚Ä¢ Âì°Â∑•ÁÆ°ÁêÜ (1‰ΩçÁ≥ªÁµ±ÁÆ°ÁêÜÂì°)")
        print("   ‚Ä¢ ÈÉ®ÈñÄÁÆ°ÁêÜ (6ÂÄãÈÉ®ÈñÄ)")
        print("   ‚Ä¢ ‰æõÊáâÂïÜ/ÂÆ¢Êà∂ÁÆ°ÁêÜ")
        print("   ‚Ä¢ Â∞àÊ°àÁÆ°ÁêÜ")
        print("   ‚Ä¢ È†êÁÆóÁÆ°ÁêÜ")
        print("   ‚Ä¢ Â†±Èä∑ÊµÅÁ®ã")
        print("   ‚Ä¢ ÈäÄË°åÂ∞çÂ∏≥")
        print("   ‚Ä¢ Á®ÖÂãôÁÆ°ÁêÜ")
        print("   ‚Ä¢ ÁôºÁ•®ÁÆ°ÁêÜ")

        return True

    except Exception as e:
        print(f"‚ùå Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂ§±Êïó: {e}")
        import traceback
        traceback.print_exc()
        return False


# ÂïüÂãïÊôÇÂàùÂßãÂåñË≥áÊñôÂ∫´
init_database()


class RealReceiptAI:
    def __init__(self):
        # ÂæûÁí∞Â¢ÉËÆäÊï∏ÂèñÂæóAPIÈáëÈë∞
        self.google_api_key = os.environ.get("GOOGLE_VISION_API_KEY")
        self.openai_api_key = os.environ.get("OPENAI_API_KEY")

        # ËºâÂÖ•ÂàÜÈ°ûÈóúÈçµÂ≠ó
        self.categories = self.load_categories()

        print(f"üîë Google Vision API: {'‚úÖ Â∑≤Ë®≠ÂÆö' if self.google_api_key else '‚ùå Êú™Ë®≠ÂÆö'}")
        print(f"üîë OpenAI API: {'‚úÖ Â∑≤Ë®≠ÂÆö' if self.openai_api_key else '‚ùå Êú™Ë®≠ÂÆö'}")

    def load_categories(self) -> Dict[str, List[str]]:
        """ÂæûË≥áÊñôÂ∫´ËºâÂÖ•ÂàÜÈ°ûÈóúÈçµÂ≠ó"""
        try:
            conn = sqlite3.connect('receipts.db')
            cursor = conn.cursor()
            cursor.execute("SELECT name, keywords FROM categories")
            categories = {}

            for name, keywords in cursor.fetchall():
                if keywords:
                    categories[name] = keywords.split(',')
                else:
                    categories[name] = []

            conn.close()
            return categories
        except Exception as e:
            print(f"ËºâÂÖ•ÂàÜÈ°ûÂ§±Êïó: {e}")
            # ÂõûÂÇ≥È†êË®≠ÂàÜÈ°û
            return {
                'È§êË≤ª': ['È§êÂª≥', 'Â∞èÂêÉ', 'ÂíñÂï°', '‰æøÁï∂', 'ÁÅ´Èçã', 'ÁáíÁÉ§', 'È£≤Êñô'],
                '‰∫§ÈÄö': ['Âä†Ê≤π', 'ÂÅúËªä', 'È´òÈêµ', 'Ë®àÁ®ãËªä', 'Êç∑ÈÅã', 'ÂÖ¨Ëªä', 'Ê©üÁ•®'],
                'Ëæ¶ÂÖ¨Áî®ÂìÅ': ['ÊñáÂÖ∑', 'Á¥ôÂºµ', 'Âç∞Ë°®Ê©ü', 'ÈõªËÖ¶', 'Á≠Ü', 'Ë≥áÊñôÂ§æ'],
                'ËªüÈ´îÊúçÂãô': ['Ë®ÇÈñ±', 'SaaS', 'Office', 'Adobe', 'Google', 'AWS'],
                'Ë®≠ÂÇô': ['ÈõªËÖ¶', 'Ëû¢Âπï', 'ÈçµÁõ§', 'ÊªëÈº†', 'Ê§ÖÂ≠ê', 'Ê°åÂ≠ê'],
                'ÈõúË≤ª': ['Ê∞¥Èõª', 'ÈõªË©±', 'Á∂≤Ë∑Ø', 'Ê∏ÖÊΩî', 'Á∂≠‰øÆ']
            }

    async def process_receipt(self, image_path: str) -> Dict:
        """ËôïÁêÜÁôºÁ•®ÔºöÁúüÂØ¶OCR ‚Üí Êô∫ËÉΩËß£Êûê ‚Üí Ëá™ÂãïÂàÜÈ°û"""

        print(f"üîç ÈñãÂßãËôïÁêÜÁôºÁ•®: {image_path}")

        # 1. ÁúüÂØ¶OCRËæ®Ë≠ò
        ocr_result = await self._real_ocr(image_path)
        text = ocr_result['text']
        confidence = ocr_result['confidence']

        print(f"üìù OCRÁµêÊûú (‰ø°ÂøÉÂ∫¶: {confidence:.2f}): {text[:100]}...")

        # 2. Êô∫ËÉΩËß£ÊûêÁôºÁ•®Ë≥áÊñô
        data = await self._smart_parse(text)
        data['ocr_confidence'] = confidence

        print(f"üîß Ëß£ÊûêÁµêÊûú: {data}")

        # 3. Êô∫ËÉΩÂàÜÈ°û
        data['category'] = self._smart_categorize(data['merchant'], text)
        print(f"üè∑Ô∏è ÂàÜÈ°ûÁµêÊûú: {data['category']}")

        return data

    async def _real_ocr(self, image_path: str) -> Dict:
        """ÁúüÂØ¶OCRËæ®Ë≠ò - ÂÑ™ÂÖà‰ΩøÁî®Google VisionÔºåÂÇôÁî®ÊñπÊ°àÁÇ∫Ê®°Êì¨"""

        if self.google_api_key:
            try:
                return await self._google_vision_ocr(image_path)
            except Exception as e:
                print(f"‚ö†Ô∏è Google Vision OCR Â§±Êïó: {e}")
                print("üîÑ ÂàáÊèõÂà∞Ê®°Êì¨Ê®°Âºè...")

        # ÂÇôÁî®ÔºöÊ®°Êì¨OCR
        return self._simulate_ocr()

    async def _google_vision_ocr(self, image_path: str) -> Dict:
        """Google Vision API OCR"""

        # ËÆÄÂèñÂúñÁâáÊ™îÊ°à
        with open(image_path, 'rb') as image_file:
            image_content = image_file.read()

        # Á∑®Á¢ºÁÇ∫base64
        image_base64 = base64.b64encode(image_content).decode('utf-8')

        # Google Vision API Ë´ãÊ±Ç
        url = f"https://vision.googleapis.com/v1/images:annotate?key={self.google_api_key}"

        payload = {
            "requests": [
                {
                    "image": {
                        "content": image_base64
                    },
                    "features": [
                        {
                            "type": "TEXT_DETECTION",
                            "maxResults": 50
                        }
                    ],
                    "imageContext": {
                        "languageHints": ["zh-TW", "zh-CN", "en"]
                    }
                }
            ]
        }

        headers = {
            "Content-Type": "application/json"
        }

        response = requests.post(url, json=payload, headers=headers)
        result = response.json()

        if response.status_code != 200:
            raise Exception(f"Google Vision API ÈåØË™§: {result}")

        if 'responses' in result and result['responses']:
            text_annotations = result['responses'][0].get('textAnnotations', [])
            if text_annotations:
                # ÂèñÂæóÂÆåÊï¥ÊñáÂ≠ó
                full_text = text_annotations[0].get('description', '')

                # Ë®àÁÆóÂπ≥Âùá‰ø°ÂøÉÂ∫¶
                confidence = 0.95  # Google Vision ÈÄöÂ∏∏ÂæàÊ∫ñÁ¢∫

                return {
                    'text': full_text,
                    'confidence': confidence,
                    'source': 'google_vision'
                }

        raise Exception("Google Vision API Ê≤íÊúâËøîÂõûÊñáÂ≠ó")

    def _simulate_ocr(self) -> Dict:
        """Ê®°Êì¨OCRÁµêÊûúÔºàÁï∂API‰∏çÂèØÁî®ÊôÇÔºâ"""
        fake_receipts = [
            """
            Áµ±‰∏ÄÁôºÁ•®
            AB12345678
            113Âπ¥12Êúà16Êó•
            ÊòüÂ∑¥ÂÖãÂíñÂï°
            Áµ±Á∑®: 28555485
            ÂìÅÈ†Ö: ÁæéÂºèÂíñÂï°Â§ßÊùØ
            Êï∏Èáè: 1
            ÂñÆÂÉπ: 120
            ÁáüÊ•≠Á®Ö: 6
            Á∏ΩË®à: 126
            """,
            """
            ÈõªÂ≠êÁôºÁ•®
            CD87654321
            113/12/16
            ÂÖ®ÂÆ∂‰æøÂà©ÂïÜÂ∫ó
            Áµ±Á∑®: 22099131
            ÂïÜÂìÅ: Ëå∂ËëâËõã
            Êï∏Èáè: 2
            ÈáëÈ°ç: 26
            Âê´Á®ÖÁ∏ΩË®à: 26
            """,
            """
            ÁôºÁ•®
            EF11223344
            2024Âπ¥12Êúà16Êó•
            È∫•Áï∂Âãû
            Áµ±Á∑®: 12345678
            Â§ßÈ∫•ÂÖãÂ•óÈ§ê: 149
            ÂèØÊ®Ç: 25
            Á∏ΩË®à: 174
            """,
            """
            Áµ±‰∏ÄÁôºÁ•®
            GH55667788
            113Âπ¥12Êúà16Êó•
            Ë™†ÂìÅÊõ∏Â∫ó
            Áµ±Á∑®: 87654321
            ÂïÜÂìÅ: PythonÁ®ãÂºèË®≠Ë®à
            ÂñÆÂÉπ: 450
            ÁáüÊ•≠Á®Ö: 21
            Á∏ΩË®à: 471
            """,
            """
            ÈõªÂ≠êÁôºÁ•®
            IJ99887766
            113Âπ¥12Êúà16Êó•
            ‰∏≠Ê≤πÂä†Ê≤πÁ´ô
            Áµ±Á∑®: 11111111
            95ÁÑ°ÈâõÊ±ΩÊ≤π
            ÂÖ¨Âçá: 30.5
            ÂñÆÂÉπ: 29.8
            Á∏ΩË®à: 909
            """
        ]

        import random
        return {
            'text': random.choice(fake_receipts),
            'confidence': 0.85,
            'source': 'simulation'
        }

    async def _smart_parse(self, text: str) -> Dict:
        """Êô∫ËÉΩËß£ÊûêÁôºÁ•®ÂÖßÂÆπ - ÂèØÈÅ∏Áî®OpenAIËºîÂä©"""

        # Âü∫Êú¨Ê≠£ÂâáË°®ÈÅîÂºèËß£Êûê
        basic_result = self._brutal_parse(text)

        # Â¶ÇÊûúÊúâOpenAI APIÔºå‰ΩøÁî®AIËºîÂä©Ëß£Êûê
        if self.openai_api_key and basic_result['amount'] == 0:
            try:
                ai_result = await self._openai_assist_parse(text)
                # Âêà‰ΩµÁµêÊûú
                for key, value in ai_result.items():
                    if value and (not basic_result.get(key) or basic_result[key] == 0):
                        basic_result[key] = value
            except Exception as e:
                print(f"‚ö†Ô∏è OpenAI ËºîÂä©Ëß£ÊûêÂ§±Êïó: {e}")

        return basic_result

    def _brutal_parse(self, text: str) -> Dict:
        """Âü∫Êú¨Ê≠£ÂâáË°®ÈÅîÂºèËß£Êûê"""

        result = {
            'invoice_number': '',
            'date': '',
            'merchant': '',
            'amount': 0,
            'tax_amount': 0,
            'items': []
        }

        # ÁôºÁ•®ËôüÁ¢ºÔºöÂÖ©ÂÄãËã±ÊñáÂ≠óÊØç+8ÂÄãÊï∏Â≠ó
        invoice_match = re.search(r'[A-Z]{2}\d{8}', text)
        if invoice_match:
            result['invoice_number'] = invoice_match.group()

        # Á∏ΩÈáëÈ°çÔºöÊõ¥ÂÖ®Èù¢ÁöÑÊ®°ÂºèÂåπÈÖç
        amount_patterns = [
            r'Á∏ΩË®à[Ôºö:\s]*\$?[\s]*(\d{1,6})',
            r'ÂêàË®à[Ôºö:\s]*\$?[\s]*(\d{1,6})',
            r'Âê´Á®ÖÁ∏ΩË®à[Ôºö:\s]*(\d{1,6})',
            r'Á∏ΩÈáëÈ°ç[Ôºö:\s]*(\d{1,6})',
            r'Â∞èË®à[Ôºö:\s]*(\d{1,6})',
            r'ÈáëÈ°ç[Ôºö:\s]*(\d{1,6})',
            r'NT\$[\s]*(\d{1,6})',
            r'ÊáâÊî∂[Ôºö:\s]*(\d{1,6})',
            r'Êî∂Ë≤ª[Ôºö:\s]*(\d{1,6})'
        ]

        for pattern in amount_patterns:
            match = re.search(pattern, text)
            if match:
                result['amount'] = int(match.group(1))
                break

        # Â¶ÇÊûúÊ≤íÊâæÂà∞Á∏ΩË®àÔºåÊâæÊúÄÂ§ßÁöÑÊï∏Â≠ó
        if result['amount'] == 0:
            numbers = re.findall(r'\d{1,6}', text)
            if numbers:
                # ÈÅéÊøæÊéâÊòéÈ°Ø‰∏çÊòØÈáëÈ°çÁöÑÊï∏Â≠óÔºàÂ¶ÇÈõªË©±ËôüÁ¢º„ÄÅÁµ±Á∑®Ôºâ
                amounts = [int(n) for n in numbers if 10 <= int(n) <= 999999 and len(n) <= 5]
                if amounts:
                    result['amount'] = max(amounts)

        # Êó•ÊúüËß£Êûê - ÊîØÊè¥Êõ¥Â§öÊ†ºÂºè
        date_patterns = [
            r'(\d{2,3})[Âπ¥/\-.](\d{1,2})[Êúà/\-.](\d{1,2})',  # Ê∞ëÂúãÂπ¥
            r'(\d{4})[Âπ¥/\-.](\d{1,2})[Êúà/\-.](\d{1,2})',  # Ë•øÂÖÉÂπ¥
            r'(\d{4})/(\d{1,2})/(\d{1,2})',  # 2024/12/16
            r'(\d{4})-(\d{1,2})-(\d{1,2})',  # 2024-12-16
        ]

        for pattern in date_patterns:
            date_match = re.search(pattern, text)
            if date_match:
                year = int(date_match.group(1))
                if year < 1000:  # Ê∞ëÂúãÂπ¥ËΩâË•øÂÖÉÂπ¥
                    year += 1911
                month = int(date_match.group(2))
                day = int(date_match.group(3))

                # È©óË≠âÊó•ÊúüÂêàÁêÜÊÄß
                if 1 <= month <= 12 and 1 <= day <= 31:
                    result['date'] = f"{year}-{month:02d}-{day:02d}"
                    break

        if not result['date']:
            result['date'] = datetime.now().strftime('%Y-%m-%d')

        # ÂïÜÂÆ∂ÂêçÁ®±ÔºöÊõ¥Êô∫ËÉΩÁöÑË≠òÂà•
        # 1. ÂÖàÊâæÂåÖÂê´Â∏∏Ë¶ãÂïÜÂÆ∂ÈóúÈçµÂ≠óÁöÑÊñáÂ≠ó
        merchant_patterns = [
            r'([\u4e00-\u9fff]+(?:ÂÖ¨Âè∏|‰ºÅÊ•≠|Ë°å|Â∫ó|È§®|Âª≥|Âùä|Â±ã|Á§æ|‰∏≠ÂøÉ))',
            r'([\u4e00-\u9fff]{2,8}(?:È§êÂª≥|ÂíñÂï°|Êõ∏Â∫ó|Ëó•Â±Ä|ÈÜ´Èô¢|Ë®∫ÊâÄ))',
            r'([A-Za-z]+(?:Starbucks|McDonald|KFC|7-ELEVEN|FamilyMart))',
        ]

        for pattern in merchant_patterns:
            merchant_match = re.search(pattern, text, re.IGNORECASE)
            if merchant_match:
                result['merchant'] = merchant_match.group(1)
                break

        # 2. Â¶ÇÊûúÊ≤íÊâæÂà∞ÔºåÊâæÊúÄÈï∑ÁöÑ‰∏≠ÊñáÂ≠ó‰∏≤
        if not result['merchant']:
            chinese_texts = re.findall(r'[\u4e00-\u9fff]+', text)
            if chinese_texts:
                # ÈÅéÊøæÊéâÂ∏∏Ë¶ãÁöÑÁÑ°Áî®Ë©û
                filtered = [t for t in chinese_texts
                            if t not in ['Áµ±‰∏ÄÁôºÁ•®', 'ÈõªÂ≠êÁôºÁ•®', 'ÁáüÊ•≠Á®Ö', 'Á∏ΩË®à', 'ÂêàË®à', 'Â∞èË®à',
                                         'ÂìÅÈ†Ö', 'Êï∏Èáè', 'ÂñÆÂÉπ', 'ÈáëÈ°ç', 'Êó•Êúü', 'ÊôÇÈñì']]
                if filtered:
                    # ÂÑ™ÂÖàÈÅ∏ÊìáÈï∑Â∫¶ÈÅ©‰∏≠ÁöÑÔºà2-8Â≠óÔºâ
                    suitable = [t for t in filtered if 2 <= len(t) <= 8]
                    if suitable:
                        result['merchant'] = max(suitable, key=len)
                    else:
                        result['merchant'] = max(filtered, key=len)

        # 3. Ëã±ÊñáÂïÜÂÆ∂ÂêçÁ®±
        if not result['merchant']:
            english_matches = re.findall(r'[A-Za-z]{3,}', text)
            if english_matches:
                # ÈÅéÊøæÊéâÂ∏∏Ë¶ãËã±ÊñáË©û
                filtered = [m for m in english_matches
                            if m.lower() not in ['receipt', 'total', 'tax', 'amount', 'date']]
                if filtered:
                    result['merchant'] = filtered[0]

        if not result['merchant']:
            result['merchant'] = 'Êú™Áü•ÂïÜÂÆ∂'

        # Á®ÖÈ°çË®àÁÆóÔºàÂè∞ÁÅ£ÁáüÊ•≠Á®Ö5%Ôºâ
        if result['amount'] > 0:
            # ÂÖàÂòóË©¶ÊâæÊòéÁ¢∫ÁöÑÁ®ÖÈ°ç
            tax_patterns = [
                r'ÁáüÊ•≠Á®Ö[Ôºö:\s]*(\d{1,4})',
                r'Á®ÖÈ°ç[Ôºö:\s]*(\d{1,4})',
                r'TAX[Ôºö:\s]*(\d{1,4})',
            ]

            for pattern in tax_patterns:
                tax_match = re.search(pattern, text, re.IGNORECASE)
                if tax_match:
                    result['tax_amount'] = int(tax_match.group(1))
                    break

            # Â¶ÇÊûúÊ≤íÊâæÂà∞ÔºåÊåâ5%Ë®àÁÆó
            if result['tax_amount'] == 0:
                result['tax_amount'] = round(result['amount'] * 0.05)

        return result

    async def _openai_assist_parse(self, text: str) -> Dict:
        """‰ΩøÁî®OpenAIËºîÂä©Ëß£ÊûêÁôºÁ•®ÔºàÂèØÈÅ∏ÂäüËÉΩÔºâ"""

        prompt = f"""
        Ë´ãËß£Êûê‰ª•‰∏ãÂè∞ÁÅ£ÁôºÁ•®ÂÖßÂÆπÔºåÊèêÂèñÈóúÈçµË≥áË®ä„ÄÇË´ã‰ª•JSONÊ†ºÂºèÂõûÁ≠îÔºö

        ÁôºÁ•®ÂÖßÂÆπÔºö
        {text}

        Ë´ãÊèêÂèñÔºö
        1. invoice_number: ÁôºÁ•®ËôüÁ¢ºÔºàÂÖ©ÂÄãËã±ÊñáÂ≠óÊØç+8ÂÄãÊï∏Â≠óÔºâ
        2. merchant: ÂïÜÂÆ∂ÂêçÁ®±
        3. amount: Á∏ΩÈáëÈ°çÔºàÊï∏Â≠óÔºâ
        4. date: Êó•ÊúüÔºàYYYY-MM-DDÊ†ºÂºèÔºâ
        5. tax_amount: Á®ÖÈ°ç

        Âè™ÂõûÁ≠îJSONÔºå‰∏çË¶ÅÂÖ∂‰ªñË™™ÊòéÊñáÂ≠ó„ÄÇ
        """

        headers = {
            "Authorization": f"Bearer {self.openai_api_key}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 200,
            "temperature": 0.1
        }

        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload
        )

        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            try:
                return json.loads(content)
            except:
                return {}

        raise Exception(f"OpenAI API ÈåØË™§: {response.status_code}")

    def _smart_categorize(self, merchant: str, full_text: str) -> str:
        """Êô∫ËÉΩÂàÜÈ°ûÔºöÁµêÂêàÂïÜÂÆ∂ÂêçÁ®±ÂíåÁôºÁ•®ÂÖßÂÆπ"""

        if not merchant:
            return 'ÈõúË≤ª'

        # Âêà‰ΩµÂïÜÂÆ∂ÂêçÁ®±ÂíåÁôºÁ•®ÂÖßÂÆπÈÄ≤Ë°åÂàÜÊûê
        analysis_text = f"{merchant} {full_text}".lower()

        # Ë®àÁÆóÊØèÂÄãÂàÜÈ°ûÁöÑÂåπÈÖçÂàÜÊï∏
        category_scores = {}

        for category, keywords in self.categories.items():
            score = 0
            for keyword in keywords:
                keyword_lower = keyword.lower()

                # ÂïÜÂÆ∂ÂêçÁ®±ÂÆåÂÖ®ÂåπÈÖçÔºöÈ´òÂàÜ
                if keyword_lower in merchant.lower():
                    score += 10

                # ÁôºÁ•®ÂÖßÂÆπÂåÖÂê´Ôºö‰∏≠Á≠âÂàÜ
                elif keyword_lower in analysis_text:
                    score += 3

                # ÈÉ®ÂàÜÂåπÈÖçÔºö‰ΩéÂàÜ
                elif any(part in analysis_text for part in keyword_lower.split() if len(part) > 2):
                    score += 1

            category_scores[category] = score

        # ÈÅ∏ÊìáÂàÜÊï∏ÊúÄÈ´òÁöÑÂàÜÈ°û
        if category_scores:
            best_category = max(category_scores.items(), key=lambda x: x[1])
            if best_category[1] > 0:  # ÊúâÂåπÈÖçÂàÜÊï∏
                return best_category[0]

        return 'ÈõúË≤ª'  # È†êË®≠ÂàÜÈ°û


# Âª∫Á´ãAIÂØ¶‰æã
ai = RealReceiptAI()


@app.post("/upload-receipt")
async def upload_receipt(file: UploadFile = File(...)):
    """ÊãçÁÖß‰∏äÂÇ≥ÁôºÁ•®ÔºåAIÊô∫ËÉΩËæ®Ë≠òÂ≠òÊ™î"""

    try:
        # Ê™¢Êü•Ê™îÊ°àÈ°ûÂûã
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="Ë´ã‰∏äÂÇ≥ÂúñÁâáÊ™îÊ°à")

        # ‰ΩøÁî®Ëá®ÊôÇÊ™îÊ°à
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            file_path = tmp_file.name

        print(f"üìÅ Ê™îÊ°àÂ∑≤ÂÑ≤Â≠ò: {file_path}")

        # AIÊô∫ËÉΩËæ®Ë≠ò
        receipt_data = await ai.process_receipt(file_path)

        # Â≠òÂÖ•Ë≥áÊñôÂ∫´
        try:
            conn = sqlite3.connect('receipts.db')
            cursor = conn.cursor()

            cursor.execute('''
                INSERT INTO receipts 
                (photo_path, invoice_number, date, merchant, amount, tax_amount, category, description, ocr_confidence)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                file_path,
                receipt_data['invoice_number'],
                receipt_data['date'],
                receipt_data['merchant'],
                receipt_data['amount'],
                receipt_data['tax_amount'],
                receipt_data['category'],
                f"AIËæ®Ë≠ò: {receipt_data['merchant']} (‰ø°ÂøÉÂ∫¶: {receipt_data.get('ocr_confidence', 0):.2f})",
                receipt_data.get('ocr_confidence', 0)
            ))

            receipt_id = cursor.lastrowid
            conn.commit()
            conn.close()

            print(f"üíæ Ë≥áÊñôÂ∑≤Â≠òÂÖ•Ë≥áÊñôÂ∫´ÔºåID: {receipt_id}")

            # Ê∏ÖÁêÜËá®ÊôÇÊ™îÊ°à
            try:
                os.unlink(file_path)
            except:
                pass

            return {
                "success": True,
                "message": "AIÁôºÁ•®Ëæ®Ë≠òÂÆåÊàêÔºÅ",
                "data": {
                    **receipt_data,
                    "id": receipt_id
                }
            }

        except Exception as db_error:
            print(f"Ë≥áÊñôÂ∫´ÈåØË™§: {db_error}")
            return {
                "success": False,
                "error": f"Ë≥áÊñôÂ∫´ÈåØË™§: {str(db_error)}"
            }

    except Exception as e:
        print(f"‚ùå ÈåØË™§: {str(e)}")
        return {
            "success": False,
            "error": f"ËôïÁêÜÂ§±Êïó: {str(e)}"
        }


@app.get("/receipts")
def get_receipts(limit: int = 50):
    """ÂèñÂæóÊúÄËøëÁöÑÁôºÁ•®Ë®òÈåÑ"""
    try:
        conn = sqlite3.connect('receipts.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, date, merchant, amount, category, created_at, ocr_confidence
            FROM receipts 
            ORDER BY created_at DESC
            LIMIT ?
        ''', (limit,))

        receipts = cursor.fetchall()
        conn.close()

        result = []
        for receipt in receipts:
            result.append({
                "id": receipt[0],
                "date": receipt[1],
                "merchant": receipt[2],
                "amount": receipt[3],
                "category": receipt[4],
                "created_at": receipt[5],
                "confidence": receipt[6] if len(receipt) > 6 else 0
            })

        return {"receipts": result}

    except Exception as e:
        return {"receipts": [], "error": str(e)}


@app.get("/monthly-report/{year}/{month}")
def monthly_report(year: int, month: int):
    """ÊúàÂ†±Ë°®ÔºöÊô∫ËÉΩÁµ±Ë®à"""
    try:
        conn = sqlite3.connect('receipts.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT category, SUM(amount), COUNT(*), AVG(ocr_confidence)
            FROM receipts 
            WHERE date LIKE ? 
            GROUP BY category
            ORDER BY SUM(amount) DESC
        ''', (f"{year}-{month:02d}%",))

        categories = cursor.fetchall()

        cursor.execute('''
            SELECT SUM(amount), SUM(tax_amount), COUNT(*), AVG(ocr_confidence)
            FROM receipts 
            WHERE date LIKE ?
        ''', (f"{year}-{month:02d}%",))

        total = cursor.fetchone()
        conn.close()

        return {
            "period": f"{year}-{month:02d}",
            "total_amount": total[0] or 0,
            "total_tax": total[1] or 0,
            "total_receipts": total[2] or 0,
            "avg_confidence": round(total[3] or 0, 2),
            "by_category": [
                {
                    "category": c[0],
                    "amount": c[1],
                    "count": c[2],
                    "avg_confidence": round(c[3] or 0, 2)
                }
                for c in categories
            ]
        }

    except Exception as e:
        return {
            "period": f"{year}-{month:02d}",
            "total_amount": 0,
            "total_tax": 0,
            "total_receipts": 0,
            "avg_confidence": 0,
            "by_category": [],
            "error": str(e)
        }


@app.get("/", response_class=HTMLResponse)
def main_page():
    """‰∏ªÈ†ÅÈù¢ÔºöAIÊô∫ËÉΩË®òÂ∏≥ÁïåÈù¢"""
    return """
    <!DOCTYPE html>
    <html lang="zh-TW">
    <head>
        <title>ü§ñ AIÊô∫ËÉΩË®òÂ∏≥Á≥ªÁµ±</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: 'Microsoft JhengHei', Arial, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            .container { 
                max-width: 800px; 
                margin: 0 auto; 
                background: white;
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            }
            h1 { 
                text-align: center; 
                color: #333; 
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .upload-section {
                text-align: center;
                margin-bottom: 40px;
                padding: 30px;
                border: 3px dashed #ddd;
                border-radius: 15px;
                background: #f9f9f9;
            }
            .camera-btn { 
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white; 
                border: none; 
                padding: 20px 40px; 
                font-size: 18px; 
                border-radius: 50px; 
                cursor: pointer;
                margin: 20px;
                box-shadow: 0 10px 20px rgba(102,126,234,0.3);
                transition: all 0.3s ease;
            }
            .camera-btn:hover {
                transform: translateY(-3px);
                box-shadow: 0 15px 30px rgba(102,126,234,0.4);
            }
            .result { 
                margin: 20px 0; 
                padding: 20px; 
                border-radius: 10px;
                animation: slideIn 0.5s ease;
            }
            .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
            .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
            .loading { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-top: 30px;
            }
            .stat-card {
                background: linear-gradient(45deg, #74b9ff, #0984e3);
                color: white;
                padding: 20px;
                border-radius: 15px;
                text-align: center;
            }
            .stat-number { font-size: 2em; font-weight: bold; }
            .stat-label { font-size: 0.9em; opacity: 0.9; }

            .recent-receipts {
                margin-top: 30px;
            }
            .receipt-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px;
                border-bottom: 1px solid #eee;
                transition: background 0.3s ease;
            }
            .receipt-item:hover { background: #f8f9fa; }
            .receipt-amount { font-weight: bold; color: #e74c3c; }
            .receipt-category { 
                background: #3498db; 
                color: white; 
                padding: 4px 12px; 
                border-radius: 20px; 
                font-size: 0.8em;
            }
            .confidence-badge {
                background: #27ae60;
                color: white;
                padding: 2px 8px;
                border-radius: 10px;
                font-size: 0.7em;
                margin-left: 5px;
            }

            @keyframes slideIn {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }

            @media (max-width: 600px) {
                .container { padding: 20px; margin: 10px; }
                h1 { font-size: 2em; }
                .camera-btn { padding: 15px 30px; font-size: 16px; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ AIÊô∫ËÉΩË®òÂ∏≥Á≥ªÁµ±</h1>

            <div class="upload-section">
                <h2>üì∑ ÊãçÁôºÁ•®ÔºåAIÁßíËæ®Ë≠ò</h2>
                <p style="color: #666; margin: 10px 0;">ÊîØÊè¥ Google Vision AI ÁúüÂØ¶ÁôºÁ•®Ëæ®Ë≠ò</p>
                <form id="uploadForm" enctype="multipart/form-data">
                    <input type="file" id="file" accept="image/*" capture="camera" style="display: none;" required>
                    <button type="button" class="camera-btn" onclick="document.getElementById('file').click()">
                        ü§ñ AIÊãçÁÖßËæ®Ë≠òÁôºÁ•®
                    </button>
                </form>
                <div id="result"></div>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="monthlyTotal">$0</div>
                    <div class="stat-label">Êú¨ÊúàÊîØÂá∫</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="monthlyCount">0</div>
                    <div class="stat-label">Êú¨ÊúàÁ≠ÜÊï∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="avgAmount">$0</div>
                    <div class="stat-label">Âπ≥ÂùáÈáëÈ°ç</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="avgConfidence">0%</div>
                    <div class="stat-label">AIÊ∫ñÁ¢∫Â∫¶</div>
                </div>
            </div>

            <div class="recent-receipts">
                <h2>üìä ÊúÄËøëË®òÈåÑ</h2>
                <div id="recentList"></div>
            </div>
        </div>

        <script>
            document.getElementById('file').onchange = async function(e) {
                const file = e.target.files[0];
                if (!file) return;

                const formData = new FormData();
                formData.append('file', file);

                const resultDiv = document.getElementById('result');
                resultDiv.innerHTML = '<div class="result loading">ü§ñ AIÊ≠£Âú®Êô∫ËÉΩËæ®Ë≠òÁôºÁ•®ÔºåË´ãÁ®çÂÄô...</div>';

                try {
                    const response = await fetch('/upload-receipt', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        const confidence = (result.data.ocr_confidence * 100).toFixed(0);
                        resultDiv.innerHTML = `
                            <div class="result success">
                                <h3>‚úÖ AIËæ®Ë≠òÊàêÂäüÔºÅ</h3>
                                <p><strong>ÂïÜÂÆ∂:</strong> ${result.data.merchant}</p>
                                <p><strong>ÈáëÈ°ç:</strong> $${result.data.amount}</p>
                                <p><strong>ÂàÜÈ°û:</strong> ${result.data.category}</p>
                                <p><strong>Êó•Êúü:</strong> ${result.data.date}</p>
                                <p><strong>ÁôºÁ•®ËôüÁ¢º:</strong> ${result.data.invoice_number || 'Êú™Ëæ®Ë≠ò'}</p>
                                <p><strong>AI‰ø°ÂøÉÂ∫¶:</strong> <span class="confidence-badge">${confidence}%</span></p>
                            </div>
                        `;

                        loadStats();
                        loadRecentReceipts();

                    } else {
                        resultDiv.innerHTML = `
                            <div class="result error">
                                <h3>‚ùå AIËæ®Ë≠òÂ§±Êïó</h3>
                                <p>${result.error}</p>
                            </div>
                        `;
                    }
                } catch (error) {
                    resultDiv.innerHTML = `
                        <div class="result error">
                            <h3>‚ùå Á∂≤Ë∑ØÈåØË™§</h3>
                            <p>${error.message}</p>
                        </div>
                    `;
                }

                document.getElementById('file').value = '';
            };

            async function loadStats() {
                try {
                    const now = new Date();
                    const response = await fetch(`/monthly-report/${now.getFullYear()}/${now.getMonth() + 1}`);
                    const data = await response.json();

                    document.getElementById('monthlyTotal').textContent = `$${(data.total_amount || 0).toLocaleString()}`;
                    document.getElementById('monthlyCount').textContent = data.total_receipts || 0;
                    document.getElementById('avgConfidence').textContent = `${(data.avg_confidence || 0).toFixed(0)}%`;

                    const avg = (data.total_receipts || 0) > 0 ? (data.total_amount || 0) / (data.total_receipts || 0) : 0;
                    document.getElementById('avgAmount').textContent = `$${Math.round(avg)}`;

                } catch (error) {
                    console.error('ËºâÂÖ•Áµ±Ë®àË≥áÊñôÂ§±Êïó:', error);
                }
            }

            async function loadRecentReceipts() {
                try {
                    const response = await fetch('/receipts?limit=10');
                    const data = await response.json();

                    let html = '';
                    if (data.receipts && data.receipts.length > 0) {
                        data.receipts.forEach(receipt => {
                            const confidence = ((receipt.confidence || 0) * 100).toFixed(0);
                            html += `
                                <div class="receipt-item">
                                    <div>
                                        <strong>${receipt.merchant}</strong>
                                        ${confidence > 0 ? `<span class="confidence-badge">${confidence}%</span>` : ''}
                                        <br>
                                        <small>${receipt.date}</small>
                                    </div>
                                    <div style="text-align: right;">
                                        <div class="receipt-amount">$${receipt.amount}</div>
                                        <div class="receipt-category">${receipt.category}</div>
                                    </div>
                                </div>
                            `;
                        });
                    } else {
                        html = '<p style="text-align: center; color: #666;">ÈÇÑÊ≤íÊúâË®òÈåÑÔºåÂø´ÊãçÁ¨¨‰∏ÄÂºµÁôºÁ•®ËÆìAIÂ≠∏ÁøíÂêßÔºÅ</p>';
                    }

                    document.getElementById('recentList').innerHTML = html;

                } catch (error) {
                    console.error('ËºâÂÖ•ÊúÄËøëË®òÈåÑÂ§±Êïó:', error);
                    document.getElementById('recentList').innerHTML = '<p style="text-align: center; color: #666;">ËºâÂÖ•Ë®òÈåÑÊôÇÁôºÁîüÈåØË™§</p>';
                }
            }

            window.onload = function() {
                loadStats();
                loadRecentReceipts();
            };
        </script>
    </body>
    </html>
    """


# ÂÅ•Â∫∑Ê™¢Êü•Á´ØÈªû
@app.get("/health")
def health_check():
    """ÂÅ•Â∫∑Ê™¢Êü•"""
    return {
        "status": "ok",
        "message": "AIÊô∫ËÉΩË®òÂ∏≥Á≥ªÁµ±ÈÅãË°åÊ≠£Â∏∏ÔºÅ",
        "features": {
            "google_vision": "‚úÖ Â∑≤Ë®≠ÂÆö" if ai.google_api_key else "‚ö†Ô∏è Êú™Ë®≠ÂÆö",
            "openai": "‚úÖ Â∑≤Ë®≠ÂÆö" if ai.openai_api_key else "‚ö†Ô∏è Êú™Ë®≠ÂÆö"
        }
    }


# ÂïüÂãïÊáâÁî®
if __name__ == "__main__":
    import uvicorn
    import os

    port = int(os.environ.get("PORT", 8080))
    print("üöÄ ÂïüÂãïAIÊô∫ËÉΩË®òÂ∏≥Á≥ªÁµ±...")
    print(f"üì± Ë®™ÂïèÁ∂≤ÂùÄ: http://localhost:{port}")
    print("üõë Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂãô")

    uvicorn.run(app, host="0.0.0.0", port=port)